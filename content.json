{"meta":{"title":"OXFFFF","subtitle":null,"description":null,"author":"oxffff","url":"http://oxffff.com"},"pages":[{"title":"about","date":"2018-04-24T20:56:10.000Z","updated":"2018-06-06T12:04:22.992Z","comments":true,"path":"about/index.html","permalink":"http://oxffff.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-04-24T20:56:04.000Z","updated":"2018-06-06T12:04:22.992Z","comments":true,"path":"categories/index.html","permalink":"http://oxffff.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-04-24T20:55:58.000Z","updated":"2018-06-06T12:04:22.996Z","comments":true,"path":"tags/index.html","permalink":"http://oxffff.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"ubuntu 安装增强ls命令ls-go","slug":"ubuntu-安装增强ls命令ls-go","date":"2018-05-11T11:23:30.000Z","updated":"2018-06-06T12:04:22.992Z","comments":true,"path":"2018/05/11/ubuntu-安装增强ls命令ls-go/","link":"","permalink":"http://oxffff.com/2018/05/11/ubuntu-安装增强ls命令ls-go/","excerpt":"","text":"1. 安装 ls-go 1go get -u github.com/acarl005/ls-go 2. 安装Nerd Fonts 12mkdir -p ~/.local/share/fontscd ~/.local/share/fonts &amp;&amp; curl -fLo \"Droid Sans Mono for Powerline Nerd Font Complete.otf\" https://github.com/ryanoasis/nerd-fonts/raw/master/patched-fonts/DroidSansMono/complete/Droid%20Sans%20Mono%20Nerd%20Font%20Complete.otf 3. 设置终端字体 4. 设置命令别名 1vi ~/.bashrc # 如果使用的是zsh 则 vi ~/.zshrc 添加 alias lg=&quot;ls-go -alnk&quot; 1source ~/.bashrc # 如果使用的是zsh 则 source ~/.zshrc 5. 效果图 具体使用查看 https://github.com/acarl005/ls-go","categories":[],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"http://oxffff.com/tags/ubuntu/"}]},{"title":"ubuntu 18.04 LTS 更新数据源","slug":"ubuntu-18-04-LTS-更新数据源","date":"2018-05-02T13:19:47.000Z","updated":"2018-06-06T12:04:22.992Z","comments":true,"path":"2018/05/02/ubuntu-18-04-LTS-更新数据源/","link":"","permalink":"http://oxffff.com/2018/05/02/ubuntu-18-04-LTS-更新数据源/","excerpt":"","text":"目前测试了两个数据源，中科大 和 阿里云 中科大 1234567891011deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse 阿里云1234567891011deb https://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb-src https://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb https://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb-src https://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb https://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb-src https://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb https://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiversedeb-src https://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse 修改/etc/apt/sources.list即可，建议先备份 12345# 备份sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak# 修改数据源sudo vi /etc/apt/sources.list 若为新安装系统，直接覆盖即可，否则建议追加到文件最后，注释掉ubuntu的原始源 我采用的是中科大的数据源 1cat /etc/apt/sources.list 1234567891011deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse 更多18.04源，戳这里","categories":[],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"http://oxffff.com/tags/ubuntu/"}]},{"title":"升级系统到Ubuntu 18.04 LTS","slug":"升级系统到Ubuntu-18-04-LTS","date":"2018-04-27T14:08:01.000Z","updated":"2018-06-06T12:04:22.992Z","comments":true,"path":"2018/04/27/升级系统到Ubuntu-18-04-LTS/","link":"","permalink":"http://oxffff.com/2018/04/27/升级系统到Ubuntu-18-04-LTS/","excerpt":"","text":"升级前请备份重要数据，防止数据意外丢失 更新当前系统 1sudo apt update &amp;&amp; sudo apt dist-upgrade 完成后重启系统 1sudo reboot 打开 Software &amp; updates For Ubuntu 16.04 LTS desktop: For Ubuntu 17.10 desktop: 开始更新 1sudo update-manager -d 更多信息参考： https://www.ostechnix.com/how-to-upgrade-to-ubuntu-18-04-lts-desktop-and-server/","categories":[],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"http://oxffff.com/tags/ubuntu/"}]},{"title":"JDK1.5-1.8各版本的新特性总结","slug":"JDK1-5-1-8各版本的新特性总结","date":"2018-04-25T12:41:00.000Z","updated":"2018-06-06T12:04:22.992Z","comments":true,"path":"2018/04/25/JDK1-5-1-8各版本的新特性总结/","link":"","permalink":"http://oxffff.com/2018/04/25/JDK1-5-1-8各版本的新特性总结/","excerpt":"","text":"摘要: 此文章意在借鉴前人经验，留作日后查看。如有侵犯，实属无意。我以后会注意，谢谢博友的提醒。也愿各大博友们能够共同学习和努力。 以下介绍一下JDK1.5版本到JDK1.7版本的特性及JDK1.8主要部分特性。仅供参考。 JDK1.5新特性 JDK1.6新特性 JDK1.7新特性 JAVA8十大新特性 JDK1.5新特性 1.自动装箱与拆箱 自动装箱：每当需要一种类型的对象时，这种基本类型就自动地封装到与它相同类型的包装中。 自动拆箱：每当需要一个值时，被装箱对象中的值就被自动地提取出来，没必要再去调用intValue()和doubleValue()方法。 自动装箱，只需将该值赋给一个类型包装器引用，java会自动创建一个对象。 自动拆箱，只需将该对象值赋给一个基本类型即可。 java——类的包装器 类型包装器有：Double, Float, Long, Integer, Short, Character 和 Boolean 2.枚举 把集合里的对象元素一个一个提取出来。枚举类型使代码更具可读性，理解清晰，易于维护。枚举类型是强类型的，从而保证了系统安全性。而以类的静态字段实现的类似替代模型，不具有枚举的简单性和类型安全性。 简单用法：JavaEnum简单的用法一般用于代表一组常用常量，可用来代表一类相同类型的常量值。 复杂用法：Java为枚举类型提供了一些内置的方法，同事枚举常量还可以有自己的方法。可以很方便的遍历枚举对象。 3.静态导入 通过使用 import static，就可以不用指定 Constants 类名而直接使用静态成员，包括静态方法。 import xxxx 和 import static xxxx 的区别是前者一般导入的是类文件如import java.util.Scanner;后者一般是导入静态的方法，import static java.lang.System.out。 4.可变参数（Varargs） 可变参数的简单语法格式为： methodName([argumentList], dataType… argumentName); 5.内省（Introspector） 内省是Java语言对Bean类属性、事件的一种缺省处理方法。例如类A中有属性name,那我们可以通过getName,setName来得到其值或者设置新的值。通过getName/setName来访问name属性，这就是默认的规则。Java中提供了一套API用来访问某个属性的getter/setter方法，通过这些API可以使你不需要了解这个规则（但你最好还是要搞清楚），这些API存放于包 java.beans 中。 一般的做法是通过类 Introspector 来获取某个对象的BeanInfo信息，然后通过BeanInfo来获取属性的描述器 （PropertyDescriptor），通过这个属性描述器就可以获取某个属性对应的getter/setter方法，然后我们就可以通过反射机制来 调用这些方法。 6.泛型(Generic) C++ 通过模板技术可以指定集合的元素类型，而Java在1.5之前一直没有相对应的功能。一个集合可以放任何类型的对象，相应地从集合里面拿对象的时候我们也不得不对他们进行强制得类型转换。猛虎引入了泛型，它允许指定集合里元素的类型，这样你可以得到强类型在编译时刻进行类型检查的好处。 7.For-Each循环 For-Each循环得加入简化了集合的遍历。假设我们要遍历一个集合对其中的元素进行一些处理。 JDK1.6新特性 有关JDK1.6的新特性reamerit的博客文章已经说的很详细了。 1：Desktop类和SystemTray类 在JDK6中 ,AWT新增加了两个类:Desktop和SystemTray。 前者可以用来打开系统默认浏览器浏览指定的URL,打开系统默认邮件客户端给指定的邮箱发邮件,用默认应用程序打开或编辑文件(比如,用记事本打开以txt为后缀名的文件),用系统默认的打印机打印文档;后者可以用来在系统托盘区创建一个托盘程序. 2.使用JAXB2来实现对象与XML之间的映射 JAXB是Java Architecture for XML Binding的缩写，可以将一个Java对象转变成为XML格式，反之亦然。 我 们把对象与关系数据库之间的映射称为ORM, 其实也可以把对象与XML之间的映射称为OXM(Object XML Mapping). 原来JAXB是Java EE的一部分，在JDK6中，SUN将其放到了Java SE中，这也是SUN的一贯做法。JDK6中自带的这个JAXB版本是2.0, 比起1.0(JSR 31)来，JAXB2(JSR 222)用JDK5的新特性Annotation来标识要作绑定的类和属性等，这就极大简化了开发的工作量。 实 际上，在Java EE 5.0中，EJB和Web Services也通过Annotation来简化开发工作。另外,JAXB2在底层是用StAX(JSR 173)来处理XML文档。除了JAXB之外，我们还可以通过XMLBeans和Castor等来实现同样的功能。 3.理解StAX StAX(JSR 173)是JDK6.0中除了DOM和SAX之外的又一种处理XML文档的API。 StAX 的来历 ：在JAXP1.3(JSR 206)有两种处理XML文档的方法:DOM(Document Object Model)和SAX(Simple API for XML). 由 于JDK6.0中的JAXB2(JSR 222)和JAX-WS 2.0(JSR 224)都会用到StAX，所以Sun决定把StAX加入到JAXP家族当中来，并将JAXP的版本升级到1.4(JAXP1.4是JAXP1.3的维护版本). JDK6里面JAXP的版本就是1.4. 。 StAX是The Streaming API for XML的缩写，一种利用拉模式解析(pull-parsing)XML文档的API.StAX通过提供一种基于事件迭代器(Iterator)的API让 程序员去控制xml文档解析过程,程序遍历这个事件迭代器去处理每一个解析事件，解析事件可以看做是程序拉出来的，也就是程序促使解析器产生一个解析事件，然后处理该事件，之后又促使解析器产生下一个解析事件，如此循环直到碰到文档结束符； SAX也是基于事件处理xml文档，但却是用推模式解析，解析器解析完整个xml文档后，才产生解析事件，然后推给程序去处理这些事件；DOM 采用的方式是将整个xml文档映射到一颗内存树，这样就可以很容易地得到父节点和子结点以及兄弟节点的数据，但如果文档很大，将会严重影响性能。 4.使用Compiler API 现在我们可以用JDK6 的Compiler API(JSR 199)去动态编译Java源文件，Compiler API结合反射功能就可以实现动态的产生Java代码并编译执行这些代码，有点动态语言的特征。 这个特性对于某些需要用到动态编译的应用程序相当有用，比如JSP Web Server，当我们手动修改JSP后，是不希望需要重启Web Server才可以看到效果的，这时候我们就可以用Compiler API来实现动态编译JSP文件，当然，现在的JSP Web Server也是支持JSP热部署的，现在的JSP Web Server通过在运行期间通过Runtime.exec或ProcessBuilder来调用javac来编译代码，这种方式需要我们产生另一个进程去 做编译工作，不够优雅而且容易使代码依赖与特定的操作系统；Compiler API通过一套易用的标准的API提供了更加丰富的方式去做动态编译,而且是跨平台的。 5.轻量级Http Server API JDK6 提供了一个简单的Http Server API,据此我们可以构建自己的嵌入式Http Server,它支持Http和Https协议,提供了HTTP1.1的部分实现，没有被实现的那部分可以通过扩展已有的Http Server API来实现,程序员必须自己实现HttpHandler接口,HttpServer会调用HttpHandler实现类的回调方法来处理客户端请求,在 这里,我们把一个Http请求和它的响应称为一个交换,包装成HttpExchange类,HttpServer负责将HttpExchange传给 HttpHandler实现类的回调方法. 6.插入式注解处理API(Pluggable Annotation Processing API) 插入式注解处理API(JSR 269)提供一套标准API来处理Annotations(JSR 175) 实 际上JSR 269不仅仅用来处理Annotation,我觉得更强大的功能是它建立了Java 语言本身的一个模型,它把method, package, constructor, type, variable, enum, annotation等Java语言元素映射为Types和Elements(两者有什么区别?), 从而将Java语言的语义映射成为对象, 我们可以在javax.lang.model包下面可以看到这些类. 所以我们可以利用JSR 269提供的API来构建一个功能丰富的元编程(metaprogramming)环境. JSR 269用Annotation Processor在编译期间而不是运行期间处理Annotation, Annotation Processor相当于编译器的一个插件,所以称为插入式注解处理.如果Annotation Processor处理Annotation时(执行process方法)产生了新的Java代码,编译器会再调用一次Annotation Processor,如果第二次处理还有新代码产生,就会接着调用Annotation Processor,直到没有新代码产生为止.每执行一次process()方法被称为一个”round”,这样整个Annotation processing过程可以看作是一个round的序列. JSR 269主要被设计成为针对Tools或者容器的API. 举个例子,我们想建立一套基于Annotation的单元测试框架(如TestNG),在测试类里面用Annotation来标识测试期间需要执行的测试方法。 7.用Console开发控制台程序 JDK6 中提供了java.io.Console 类专用来访问基于字符的控制台设备. 你的程序如果要与Windows下的cmd或者Linux下的Terminal交互,就可以用Console类代劳. 但我们不总是能得到可用的Console, 一个JVM是否有可用的Console依赖于底层平台和JVM如何被调用. 如果JVM是在交互式命令行(比如Windows的cmd)中启动的,并且输入输出没有重定向到另外的地方,那么就可以得到一个可用的Console实例. 8.对脚本语言的支持如: ruby, groovy, javascript 9：Common Annotations Common annotations原本是Java EE 5.0(JSR 244)规范的一部分，现在SUN把它的一部分放到了Java SE 6.0中. 随 着Annotation元数据功能(JSR 175)加入到Java SE 5.0里面，很多Java 技术(比如EJB,Web Services)都会用Annotation部分代替XML文件来配置运行参数（或者说是支持声明式编程,如EJB的声明式事务）, 如果这些技术为通用目的都单独定义了自己的Annotations,显然有点重复建设, 所以,为其他相关的Java技术定义一套公共的Annotation是有价值的，可以避免重复建设的同时，也保证Java SE和Java EE 各种技术的一致性. 下面列举出Common Annotations 1.0里面的10个Annotations Common Annotations Annotation Retention Target Description Generated Source ANNOTATION_TYPE, CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE 用于标注生成的源代码 Resource Runtime TYPE, METHOD, FIELD 用于标注所依赖的资源,容器据此注入外部资源依赖，有基于字段的注入和基于setter方法的注入两种方式 Resources Runtime TYPE 同时标注多个外部依赖，容器会把所有这些外部依赖注入 PostConstruct Runtime METHOD 标注当容器注入所有依赖之后运行的方法，用来进行依赖注入后的初始化工作，只有一个方法可以标注为PostConstruct PreDestroy Runtime METHOD 当对象实例将要被从容器当中删掉之前，要执行的回调方法要标注为PreDestroy RunAs Runtime TYPE 用于标注用什么安全角色来执行被标注类的方法，这个安全角色必须和Container 的Security角色一致的。RolesAllowed Runtime TYPE, METHOD 用于标注允许执行被标注类或方法的安全角色，这个安全角色必须和Container 的Security角色一致的 PermitAll Runtime TYPE, METHOD 允许所有角色执行被标注的类或方法 DenyAll Runtime TYPE, METHOD 不允许任何角色执行被标注的类或方法，表明该类或方法不能在Java EE容器里面运行 DeclareRoles Runtime TYPE 用来定义可以被应用程序检验的安全角色，通常用isUserInRole来检验安全角色 注意: RolesAllowed,PermitAll,DenyAll不能同时应用到一个类或方法上 标注在方法上的RolesAllowed,PermitAll,DenyAll会覆盖标注在类上的RolesAllowed,PermitAll,DenyAll RunAs,RolesAllowed,PermitAll,DenyAll和DeclareRoles还没有加到Java SE 6.0上来 处理以上Annotations的工作是由Java EE容器来做, Java SE 6.0只是包含了上面表格的前五种Annotations的定义类,并没有包含处理这些Annotations的引擎,这个工作可以由Pluggable Annotation Processing API(JSR 269)来做 改动的地方最大的就是java GUI界面的显示了，JDK6.0（也就是JDK1.6）支持最新的windows vista系统的Windows Aero视窗效果，而JDK1.5不支持！！！ 你要在vista环境下编程的话最好装jdk6.0，否则它总是换到windows basic视窗效果. JDK1.7新特性 1.switch中可以使用字串 1234567891011String s = \"test\";switch (s) &#123; case \"test\" : System.out.println(\"test\"); case \"test1\" : System.out.println(\"test1\"); break ; default : System.out.println(\"break\"); break ;&#125; 2.”&lt;&gt;”这个玩意儿的运用 List tempList = new ArrayList&lt;&gt;(); 即泛型实例化类型自动推断。 12345678910111213141516171819202122public class JDK7GenericTest &#123; public static void main(String[] args) &#123; // Pre-JDK 7 List&lt;String&gt; lst1 = new ArrayList&lt;String&gt;(); // JDK 7 supports limited type inference for generic instance creation List&lt;String&gt; lst2 = new ArrayList&lt;&gt;(); lst1.add(\"Mon\"); lst1.add(\"Tue\"); lst2.add(\"Wed\"); lst2.add(\"Thu\"); for (String item: lst1) &#123; System.out.println(item); &#125; for (String item: lst2) &#123; System.out.println(item); &#125; &#125;&#125; 3.自定义自动关闭类 以下是jdk7 api中的接口，（不过注释太长，删掉了close()方法的一部分注释） 123456789101112131415/** * A resource that must be closed when it is no longer needed. * * @author Josh Bloch * @since 1.7 */public interface AutoCloseable &#123; /** * Closes this resource, relinquishing any underlying resources. * This method is invoked automatically on objects managed by the * &#123;@code try&#125;-with-resources statement. * */ void close() throws Exception;&#125; 只要实现该接口，在该类对象销毁时自动调用close方法，你可以在close方法关闭你想关闭的资源，例子如下 1234567class TryClose implements AutoCloseable &#123; @Override public void close() throw Exception &#123; System.out.println(\" Custom close method … close resources \"); &#125;&#125; 12345678910//请看jdk自带类BufferedReader如何实现close方法（当然还有很多类似类型的类）public void close() throws IOException &#123; synchronized (lock) &#123; if (in == null) return; in.close(); in = null; cb = null; &#125;&#125; 4.新增一些取环境信息的工具方法 1234567File System.getJavaIoTempDir() // IO临时文件夹File System.getJavaHomeDir() // JRE的安装目录File System.getUserHomeDir() // 当前用户目录File System.getUserDir() // 启动java进程时所在的目录 5.Boolean类型反转，空指针安全，参与位运算 1234567891011121314// True =&gt; False , False =&gt; True, Null =&gt; NullBoolean Booleans.negate(Boolean booleanObj)boolean Booleans.and(boolean[] array)boolean Booleans.or(boolean[] array)boolean Booleans.xor(boolean[] array)boolean Booleans.and(Boolean[] array)boolean Booleans.or(Boolean[] array)boolean Booleans.xor(Boolean[] array) 6.两个char间的equals 1boolean Character.equalsIgnoreCase(char ch1, char ch2) 7.安全的加减乘除 1234567891011121314151617181920212223int Math.safeToInt(long value)int Math.safeNegate(int value)long Math.safeSubtract(long value1, int value2)long Math.safeSubtract(long value1, long value2)int Math.safeMultiply(int value1, int value2)long Math.safeMultiply(long value1, int value2)long Math.safeMultiply(long value1, long value2)long Math.safeNegate(long value)int Math.safeAdd(int value1, int value2)long Math.safeAdd(long value1, int value2)long Math.safeAdd(long value1, long value2)int Math.safeSubtract(int value1, int value2) 8.数值可加下划线 例如：1int one_million = 1_000_000; 9.支持二进制文字 例如：1int binary = 0b1001_1001; 10.简化了可变参数方法的调用 当程序员试图使用一个不可具体化的可变参数并调用一个varargs（可变）方法时，编辑器会生成一个“非安全操作”的警告。 11.在try catch异常扑捉中，一个catch可以写多个异常类型，用”|”隔开 jdk7之前： 1234567try &#123; // some statement here.&#125; catch(ClassNotFoundException ex) &#123; ex.printStackTrace();&#125; catch(SQLException ex) &#123; ex.printStackTrace();&#125; jdk7例子如下 12345try &#123; // some statement here.&#125; catch(ClassNotFoundException | SQLException ex) &#123; ex.printStackTrace();&#125; 12.try/catch/finally资源关闭优化 jdk7之前，你必须用try{}finally{}在try内使用资源，在finally中关闭资源，不管try中的代码是否正常退出或者异常退出。jdk7之后，你可以不必要写finally语句来关闭资源，只要你在try()的括号内部定义要使用的资源. jdk7之前： 123456789101112131415161718192021222324252627282930313233import java.io.*;// Copy from one file to another file character by character.// Pre-JDK 7 requires you to close the resources using a finally block.public class FileCopyPreJDK7 &#123; public static void main(String[] args) &#123; BufferedReader in = null; BufferedWriter out = null; try &#123; in = new BufferedReader(new FileReader(\"in.txt\")); out = new BufferedWriter(new FileWriter(\"out.txt\")); int charRead; while ((charRead = in.read()) != -1) &#123; System.out.printf(\"%c \", (char)charRead); out.write(charRead); &#125; &#125; catch (IOException ex) &#123; ex.printStackTrace(); &#125; finally &#123; // always close the streams try &#123; if (in != null) in.close(); if (out != null) out.close(); &#125; catch (IOException ex) &#123; ex.printStackTrace(); &#125; &#125; try &#123; in.read(); // Trigger IOException: Stream closed &#125; catch (IOException ex) &#123; ex.printStackTrace(); &#125; &#125;&#125; jdk7之后 123456789101112131415161718import java.io.*;// Copy from one file to another file character by character.// JDK 7 has a try-with-resources statement, which ensures that// each resource opened in try() is closed at the end of the statement.public class FileCopyJDK7 &#123; public static void main(String[] args) &#123; try (BufferedReader in = new BufferedReader(new FileReader(\"in.txt\")); BufferedWriter out = new BufferedWriter(new FileWriter(\"out.txt\"))) &#123; int charRead; while ((charRead = in.read()) != -1) &#123; System.out.printf(\"%c \", (char)charRead); out.write(charRead); &#125; &#125; catch (IOException ex) &#123; ex.printStackTrace(); &#125; &#125;&#125; JAVA8十大新特性 1.接口的默认方法 Java 8允许我们给接口添加一个非抽象的方法实现，只需要使用 default 关键字即可，这个特征又叫做扩展方法，示例如下： 代码如下:123456interface Formula &#123; double calculate(int a); default double sqrt(int a) &#123; return Math.sqrt(a); &#125;&#125; Formula接口在拥有calculate方法之外同时还定义了sqrt方法，实现了Formula接口的子类只需要实现一个calculate方法，默认方法sqrt将在子类上可以直接使用。 代码如下: 12345678Formula formula = new Formula() &#123; @Override public double calculate(int a) &#123; return sqrt(a * 100); &#125;&#125;;formula.calculate(100); // 100.0formula.sqrt(16); // 4.0 文中的formula被实现为一个匿名类的实例，该代码非常容易理解，6行代码实现了计算 sqrt(a * 100)。在下一节中，我们将会看到实现单方法接口的更简单的做法。 译者注： 在Java中只有单继承，如果要让一个类赋予新的特性，通常是使用接口来实现，在C++中支持多继承，允许一个子类同时具有多个父类的接口与功能，在其他 语言中，让一个类同时具有其他的可复用代码的方法叫做mixin。新的Java 8 的这个特新在编译器实现的角度上来说更加接近Scala的trait。 在C#中也有名为扩展方法的概念，允许给已存在的类型扩展方法，和Java 8的这个在语义上有差别。 2.Lambda 表达式 首先看看在老版本的Java中是如何排列字符串的： 1234567List&lt;String&gt; names = Arrays.asList(\"peter\", \"anna\", \"mike\", \"xenia\");Collections.sort(names, new Comparator&lt;String&gt;() &#123; @Override public int compare(String a, String b) &#123; return b.compareTo(a); &#125;&#125;); 只需要给静态方法 Collections.sort 传入一个List对象以及一个比较器来按指定顺序排列。通常做法都是创建一个匿名的比较器对象然后将其传递给sort方法。 在Java 8 中你就没必要使用这种传统的匿名对象的方式了，Java 8提供了更简洁的语法，lambda表达式： 123Collections.sort(names, (String a, String b) -&gt; &#123; return b.compareTo(a);&#125;); 看到了吧，代码变得更段且更具有可读性，但是实际上还可以写得更短： 1Collections.sort(names, (String a, String b) -&gt; b.compareTo(a)); 对于函数体只有一行代码的，你可以去掉大括号{}以及return关键字，但是你还可以写得更短点： 1Collections.sort(names, (a, b) -&gt; b.compareTo(a)); java编译器可以自动推导出参数类型，所以你可以不用再写一次类型。接下来我们看看lambda表达式还能作出什么更方便的东西来 3：函数式接口 Lambda 表达式是如何在java的类型系统中表示的呢？每一个lambda表达式都对应一个类型，通常是接口类型。而“函数式接口”是指仅仅只包含一个抽象方法的接口，每一个该类型的lambda表达式都会被匹配到这个抽象方法。因为默认方法 不算抽象方法，所以你也可以给你的函数式接口添加默认方法。 我们可以将lambda表达式当作任意只包含一个抽象方法的接口类型，确保你的接口一定达到这个要求，你只需要给你的接口添加 @FunctionalInterface 注解，编译器如果发现你标注了这个注解的接口有多于一个抽象方法的时候会报错的。 示例如下： 1234567@FunctionalInterfaceinterface Converter&lt;F, T&gt; &#123; T convert(F from);&#125;Converter&lt;String, Integer&gt; converter = (from) -&gt; Integer.valueOf(from);Integer converted = converter.convert(\"123\");System.out.println(converted); // 123 需要注意如果 @FunctionalInterface 如果没有指定，上面的代码也是对的。 译者注: 将lambda表达式映射到一个单方法的接口上，这种做法在Java 8之前就有别的语言实现，比如Rhino JavaScript解释器，如果一个函数参数接收一个单方法的接口而你传递的是一个function，Rhino 解释器会自动做一个单接口的实例到function的适配器，典型的应用场景有 org.w3c.dom.events.EventTarget 的addEventListener 第二个参数 EventListener。 4.方法与构造函数引用 前一节中的代码还可以通过静态方法引用来表示： 123Converter&lt;String, Integer&gt; converter = Integer::valueOf;Integer converted = converter.convert(\"123\");System.out.println(converted); // 123 Java 8 允许你使用 :: 关键字来传递方法或者构造函数引用，上面的代码展示了如何引用一个静态方法，我们也可以引用一个对象的方法： 123converter = something::startsWith;String converted = converter.convert(\"Java\");System.out.println(converted); // \"J\" 接下来看看构造函数是如何使用 :: 关键字来引用的，首先我们定义一个包含多个构造函数的简单类： 12345678910class Person &#123; String firstName; String lastName; Person() &#123;&#125; Person(String firstName, String lastName) &#123; this.firstName = firstName; this.lastName = lastName; &#125;&#125; 接下来我们指定一个用来创建Person对象的对象工厂接口： 123interface PersonFactory&lt;P extends Person&gt; &#123; P create(String firstName, String lastName);&#125; 这里我们使用构造函数引用来将他们关联起来，而不是实现一个完整的工厂： 12PersonFactory&lt;Person&gt; personFactory = Person::new;Person person = personFactory.create(\"Peter\", \"Parker\"); 我们只需要使用 Person::new 来获取Person类构造函数的引用，Java编译器会自动根据 PersonFactory.create 方法的签名来选择合适的构造函数。 5.Lambda 作用域 在lambda表达式中访问外层作用域和老版本的匿名对象中的方式很相似。你可以直接访问标记了 final 的外层局部变量，或者实例的字段以及静态变量。 6.访问局部变量 我们可以直接在lambda表达式中访问外层的局部变量： 123final int num = 1;Converter&lt;Integer, String&gt; stringConverter = (from) -&gt; String.valueOf(from + num);stringConverter.convert(2); // 3 但是和匿名对象不同的是，这里的变量num可以不用声明为final，该代码同样正确： 123int num = 1;Converter&lt;Integer, String&gt; stringConverter = (from) -&gt; String.valueOf(from + num);stringConverter.convert(2); // 3 不过这里的num必须不可被后面的代码修改（即隐性的具有final的语义），例如下面的就无法编译： 123int num = 1;Converter&lt;Integer, String&gt; stringConverter = (from) -&gt; String.valueOf(from + num);num = 3; 在lambda表达式中试图修改num同样是不允许的。 7.访问对象字段与静态变量 和本地变量不同的是，lambda内部对于实例的字段以及静态变量是即可读又可写。该行为和匿名对象是一致的： 123456789101112131415class Lambda4 &#123; static int outerStaticNum; int outerNum; void testScopes() &#123; Converter&lt;Integer, String&gt; stringConverter1 = (from) -&gt; &#123; outerNum = 23; return String.valueOf(from); &#125;; Converter&lt;Integer, String&gt; stringConverter2 = (from) -&gt; &#123; outerStaticNum = 72; return String.valueOf(from); &#125;; &#125;&#125; 8.访问接口的默认方法 还记得第一节中的formula例子么，接口Formula定义了一个默认方法sqrt可以直接被formula的实例包括匿名对象访问到，但是在lambda表达式中这个是不行的。Lambda表达式中是无法访问到默认方法的，以下代码将无法编译： 12Formula formula = (a) -&gt; sqrt( a * 100);Built-in Functional Interfaces JDK 1.8 API包含了很多内建的函数式接口，在老Java中常用到的比如Comparator或者Runnable接口，这些接口都增加了@FunctionalInterface注解以便能用在lambda上。Java 8 API同样还提供了很多全新的函数式接口来让工作更加方便，有一些接口是来自Google Guava库里的，即便你对这些很熟悉了，还是有必要看看这些是如何扩展到lambda上使用的。Predicate接口 Predicate 接口只有一个参数，返回boolean类型。该接口包含多种默认方法来将Predicate组合成其他复杂的逻辑（比如：与，或，非）： 123456789Predicate&lt;String&gt; predicate = (s) -&gt; s.length() &gt; 0;predicate.test(\"foo\"); // truepredicate.negate().test(\"foo\"); // falsePredicate&lt;Boolean&gt; nonNull = Objects::nonNull;Predicate&lt;Boolean&gt; isNull = Objects::isNull;Predicate&lt;String&gt; isEmpty = String::isEmpty;Predicate&lt;String&gt; isNotEmpty = isEmpty.negate(); Function 接口 Function 接口有一个参数并且返回一个结果，并附带了一些可以和其他函数组合的默认方法（compose, andThen）： 123Function&lt;String, Integer&gt; toInteger = Integer::valueOf;Function&lt;String, String&gt; backToString = toInteger.andThen(String::valueOf);backToString.apply(\"123\"); // \"123\" Supplier 接口Supplier 接口返回一个任意范型的值，和Function接口不同的是该接口没有任何参数 12Supplier&lt;Person&gt; personSupplier = Person::new;personSupplier.get(); // new Person Consumer 接口 Consumer 接口表示执行在单个参数上的操作。 12Consumer&lt;Person&gt; greeter = (p) -&gt; System.out.println(\"Hello, \" + p.firstName);greeter.accept(new Person(\"Luke\", \"Skywalker\")); Comparator 接口Comparator 是老Java中的经典接口， Java 8在此之上添加了多种默认方法： 123456Comparator&lt;Person&gt; comparator = (p1, p2) -&gt; p1.firstName.compareTo(p2.firstName);Person p1 = new Person(\"John\", \"Doe\");Person p2 = new Person(\"Alice\", \"Wonderland\");comparator.compare(p1, p2); // &gt; 0comparator.reversed().compare(p1, p2); // &lt; 0 Optional 接口 Optional 不是函数是接口，这是个用来防止 NullPointerException 异常的辅助类型，这是下一届中将要用到的重要概念，现在先简单的看看这个接口能干什么： Optional 被定义为一个简单的容器，其值可能是null或者不是null。在Java 8之前一般某个函数应该返回非空对象但是偶尔却可能返回了null，而在Java 8中，不推荐你返回null而是返回Optional。 123456Optional&lt;String&gt; optional = Optional.of(&quot;bam&quot;);optional.isPresent(); // trueoptional.get(); // &quot;bam&quot;optional.orElse(&quot;fallback&quot;); // &quot;bam&quot;optional.ifPresent((s) -&gt; System.out.println(s.charAt(0))); // &quot;b&quot; Stream 接口 java.util.Stream 表示能应用在一组元素上一次执行的操作序列。Stream 操作分为中间操作或者最终操作两种，最终操作返回一特定类型的计算结果，而中间操作返回Stream本身，这样你就可以将多个操作依次串起来。 Stream 的创建需要指定一个数据源，比如 java.util.Collection的子类，List或者Set， Map不支持。Stream的操作可以串行执行或者并行执行。 首先看看Stream是怎么用，首先创建实例代码的用到的数据List： 123456789List&lt;String&gt; stringCollection = new ArrayList&lt;&gt;();stringCollection.add(\"ddd2\");stringCollection.add(\"aaa2\");stringCollection.add(\"bbb1\");stringCollection.add(\"aaa1\");stringCollection.add(\"bbb3\");stringCollection.add(\"ccc\");stringCollection.add(\"bbb2\");stringCollection.add(\"ddd1\"); Java 8扩展了集合类，可以通过 Collection.stream() 或者 Collection.parallelStream() 来创建一个Stream。下面几节将详细解释常用的Stream操作： Filter 过滤 过滤通过一个predicate接口来过滤并只保留符合条件的元素，该操作属于中间操作，所以我们可以在过滤后的结果来应用其他Stream操作 （比如forEach）。forEach需要一个函数来对过滤后的元素依次执行。forEach是一个最终操作，所以我们不能在forEach之后来执行 其他Stream操作。 12345stringCollection .stream() .filter((s) -&gt; s.startsWith(\"a\")) .forEach(System.out::println);// \"aaa2\", \"aaa1\" Sort 排序 排序是一个中间操作，返回的是排序好后的Stream。如果你不指定一个自定义的Comparator则会使用默认排序。 123456stringCollection .stream() .sorted() .filter((s) -&gt; s.startsWith(\"a\")) .forEach(System.out::println);// \"aaa1\", \"aaa2\" 需要注意的是，排序只创建了一个排列好后的Stream，而不会影响原有的数据源，排序之后原数据stringCollection是不会被修改的： 12System.out.println(stringCollection);// ddd2, aaa2, bbb1, aaa1, bbb3, ccc, bbb2, ddd1 Map 映射 中间操作map会将元素根据指定的Function接口来依次将元素转成另外的对象，下面的示例展示了将字符串转换为大写字符串。你也可以通过map来讲对象转换成其他类型，map返回的Stream类型是根据你map传递进去的函数的返回值决定的。 123456stringCollection .stream() .map(String::toUpperCase) .sorted((a, b) -&gt; b.compareTo(a)) .forEach(System.out::println);// \"DDD2\", \"DDD1\", \"CCC\", \"BBB3\", \"BBB2\", \"AAA2\", \"AAA1\" Match 匹配 Stream提供了多种匹配操作，允许检测指定的Predicate是否匹配整个Stream。所有的匹配操作都是最终操作，并返回一个boolean类型的值。 12345678910111213141516171819boolean anyStartsWithA = stringCollection .stream() .anyMatch((s) -&gt; s.startsWith(\"a\"));System.out.println(anyStartsWithA); // trueboolean allStartsWithA = stringCollection .stream() .allMatch((s) -&gt; s.startsWith(\"a\"));System.out.println(allStartsWithA); // falseboolean noneStartsWithZ = stringCollection .stream() .noneMatch((s) -&gt; s.startsWith(\"z\"));System.out.println(noneStartsWithZ); // true Count 计数 计数是一个最终操作，返回Stream中元素的个数，返回值类型是long。 123456long startsWithB = stringCollection .stream() .filter((s) -&gt; s.startsWith(\"b\")) .count();System.out.println(startsWithB); // 3 Reduce 规约 这是一个最终操作，允许通过指定的函数来讲stream中的多个元素规约为一个元素，规越后的结果是通过Optional接口表示的： 1234567Optional&lt;String&gt; reduced = stringCollection .stream() .sorted() .reduce((s1, s2) -&gt; s1 + \"#\" + s2);reduced.ifPresent(System.out::println);// \"aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2\" 并行Streams 前面提到过Stream有串行和并行两种，串行Stream上的操作是在一个线程中依次完成，而并行Stream则是在多个线程上同时执行。 下面的例子展示了是如何通过并行Stream来提升性能： 首先我们创建一个没有重复元素的大表： 123456int max = 1000000;List&lt;String&gt; values = new ArrayList&lt;&gt;(max);for (int i = 0; i &lt; max; i++) &#123; UUID uuid = UUID.randomUUID(); values.add(uuid.toString());&#125; 然后我们计算一下排序这个Stream要耗时多久， 串行排序： 12345678910long t0 = System.nanoTime();long count = values.stream().sorted().count();System.out.println(count);long t1 = System.nanoTime();long millis = TimeUnit.NANOSECONDS.toMillis(t1 - t0);System.out.println(String.format(\"sequential sort took: %d ms\", millis));// 串行耗时: 899 ms 并行排序： 12345678910long t0 = System.nanoTime();long count = values.parallelStream().sorted().count();System.out.println(count);long t1 = System.nanoTime();long millis = TimeUnit.NANOSECONDS.toMillis(t1 - t0);System.out.println(String.format(\"parallel sort took: %d ms\", millis));// 并行排序耗时: 472 ms 上面两个代码几乎是一样的，但是并行版的快了50%之多，唯一需要做的改动就是将 stream() 改为parallelStream()。 Map 前面提到过，Map类型不支持stream，不过Map提供了一些新的有用的方法来处理一些日常任务。 12345Map&lt;Integer, String&gt; map = new HashMap&lt;&gt;();for (int i = 0; i &lt; 10; i++) &#123; map.putIfAbsent(i, \"val\" + i);&#125;map.forEach((id, val) -&gt; System.out.println(val)); 以上代码很容易理解， putIfAbsent 不需要我们做额外的存在性检查，而forEach则接收一个Consumer接口来对map里的每一个键值对进行操作。 下面的例子展示了map上的其他有用的函数： 12345678910map.computeIfPresent(3, (num, val) -&gt; val + num);map.get(3); // val33map.computeIfPresent(9, (num, val) -&gt; null);map.containsKey(9); // falsemap.computeIfAbsent(23, num -&gt; \"val\" + num);map.containsKey(23); // truemap.computeIfAbsent(3, num -&gt; \"bam\");map.get(3); // val33 接下来展示如何在Map里删除一个键值全都匹配的项： 1234map.remove(3, \"val3\");map.get(3); // val33map.remove(3, \"val33\");map.get(3); // null 另外一个有用的方法： 1map.getOrDefault(42, \"not found\"); // not found 对Map的元素做合并也变得很容易了： 1234map.merge(9, \"val9\", (value, newValue) -&gt; value.concat(newValue));map.get(9); // val9map.merge(9, \"concat\", (value, newValue) -&gt; value.concat(newValue));map.get(9); // val9concat Merge做的事情是如果键名不存在则插入，否则则对原键对应的值做合并操作并重新插入到map中。 9.Date API Java 8 在包java.time下包含了一组全新的时间日期API。新的日期API和开源的Joda-Time库差不多，但又不完全一样，下面的例子展示了这组新API里最重要的一些部分：Clock 时钟 Clock类提供了访问当前日期和时间的方法，Clock是时区敏感的，可以用来取代 System.currentTimeMillis() 来获取当前的微秒数。某一个特定的时间点也可以使用Instant类来表示，Instant类也可以用来创建老的java.util.Date对象。 1234Clock clock = Clock.systemDefaultZone();long millis = clock.millis();Instant instant = clock.instant();Date legacyDate = Date.from(instant); // legacy java.util.Date Timezones 时区 在新API中时区使用ZoneId来表示。时区可以很方便的使用静态方法of来获取到。 时区定义了到UTS时间的时间差，在Instant时间点对象到本地日期对象之间转换的时候是极其重要的。 12345678System.out.println(ZoneId.getAvailableZoneIds());// prints all available timezone idsZoneId zone1 = ZoneId.of(\"Europe/Berlin\");ZoneId zone2 = ZoneId.of(\"Brazil/East\");System.out.println(zone1.getRules());System.out.println(zone2.getRules());// ZoneRules[currentStandardOffset=+01:00]// ZoneRules[currentStandardOffset=-03:00] LocalTime 本地时间 LocalTime 定义了一个没有时区信息的时间，例如 晚上10点，或者 17:30:15。下面的例子使用前面代码创建的时区创建了两个本地时间。之后比较时间并以小时和分钟为单位计算两个时间的时间差： 123456789LocalTime now1 = LocalTime.now(zone1);LocalTime now2 = LocalTime.now(zone2);System.out.println(now1.isBefore(now2)); // falselong hoursBetween = ChronoUnit.HOURS.between(now1, now2);long minutesBetween = ChronoUnit.MINUTES.between(now1, now2);System.out.println(hoursBetween); // -3System.out.println(minutesBetween); // -239 LocalTime 提供了多种工厂方法来简化对象的创建，包括解析时间字符串。 123456789LocalTime late = LocalTime.of(23, 59, 59);System.out.println(late); // 23:59:59DateTimeFormatter germanFormatter = DateTimeFormatter .ofLocalizedTime(FormatStyle.SHORT) .withLocale(Locale.GERMAN);LocalTime leetTime = LocalTime.parse(\"13:37\", germanFormatter);System.out.println(leetTime); // 13:37 LocalDate 本地日期 LocalDate 表示了一个确切的日期，比如 2014-03-11。该对象值是不可变的，用起来和LocalTime基本一致。下面的例子展示了如何给Date对象加减天/月/年。另外要注意的是这些对象是不可变的，操作返回的总是一个新实例。 1234567LocalDate today = LocalDate.now();LocalDate tomorrow = today.plus(1, ChronoUnit.DAYS);LocalDate yesterday = tomorrow.minusDays(2);LocalDate independenceDay = LocalDate.of(2014, Month.JULY, 4);DayOfWeek dayOfWeek = independenceDay.getDayOfWeek();System.out.println(dayOfWeek); // FRIDAY 从字符串解析一个LocalDate类型和解析LocalTime一样简单： 123456DateTimeFormatter germanFormatter = DateTimeFormatter .ofLocalizedDate(FormatStyle.MEDIUM) .withLocale(Locale.GERMAN);LocalDate xmas = LocalDate.parse(\"24.12.2014\", germanFormatter);System.out.println(xmas); // 2014-12-24 LocalDateTime 本地日期时间 LocalDateTime 同时表示了时间和日期，相当于前两节内容合并到一个对象上了。LocalDateTime和LocalTime还有LocalDate一样，都是不可变的。LocalDateTime提供了一些能访问具体字段的方法。 123456789LocalDateTime sylvester = LocalDateTime.of(2014, Month.DECEMBER, 31, 23, 59, 59);DayOfWeek dayOfWeek = sylvester.getDayOfWeek();System.out.println(dayOfWeek); // WEDNESDAYMonth month = sylvester.getMonth();System.out.println(month); // DECEMBERlong minuteOfDay = sylvester.getLong(ChronoField.MINUTE_OF_DAY);System.out.println(minuteOfDay); // 1439 只要附加上时区信息，就可以将其转换为一个时间点Instant对象，Instant时间点对象可以很容易的转换为老式的java.util.Date。 12345Instant instant = sylvester .atZone(ZoneId.systemDefault()) .toInstant();Date legacyDate = Date.from(instant);System.out.println(legacyDate); // Wed Dec 31 23:59:59 CET 2014 格式化LocalDateTime和格式化时间和日期一样的，除了使用预定义好的格式外，我们也可以自己定义格式： 123456DateTimeFormatter formatter = DateTimeFormatter .ofPattern(\"MMM dd, yyyy - HH:mm\");LocalDateTime parsed = LocalDateTime.parse(\"Nov 03, 2014 - 07:13\", formatter);String string = formatter.format(parsed);System.out.println(string); // Nov 03, 2014 - 07:13 和java.text.NumberFormat不一样的是新版的DateTimeFormatter是不可变的，所以它是线程安全的。关于时间日期格式的详细信息： DateTimeFormatter 10.Annotation 注解 在Java 8中支持多重注解了，先看个例子来理解一下是什么意思。首先定义一个包装类Hints注解用来放置一组具体的Hint注解： 12345678@interface Hints &#123; Hint[] value();&#125;@Repeatable(Hints.class)@interface Hint &#123; String value();&#125; Java 8允许我们把同一个类型的注解使用多次，只需要给该注解标注一下 @Repeatable 即可。 例 1: 使用包装类当容器来存多个注解（老方法） 12@Hints(&#123;@Hint(\"hint1\"), @Hint(\"hint2\")&#125;)class Person &#123;&#125; 例 2：使用多重注解（新方法） 123@Hint(\"hint1\")@Hint(\"hint2\")class Person &#123;&#125; 第二个例子里java编译器会隐性的帮你定义好@Hints注解，了解这一点有助于你用反射来获取这些信息： 123456Hint hint = Person.class.getAnnotation(Hint.class);System.out.println(hint); // nullHints hints1 = Person.class.getAnnotation(Hints.class);System.out.println(hints1.value().length); // 2Hint[] hints2 = Person.class.getAnnotationsByType(Hint.class);System.out.println(hints2.length); // 2 即便我们没有在Person类上定义@Hints注解，我们还是可以通过 getAnnotation(Hints.class) 来获取 @Hints注解，更加方便的方法是使用 getAnnotationsByType 可以直接获取到所有的@Hint注解。另外Java 8的注解还增加到两种新的target上了： 12@Target(&#123;ElementType.TYPE_PARAMETER, ElementType.TYPE_USE&#125;)@interface MyAnnotation &#123;&#125; 关于Java 8的新特性就写到这了，肯定还有更多的特性等待发掘。JDK 1.8里还有很多很有用的东西，比如Arrays.parallelSort, StampedLock和CompletableFuture等等。 原文链接：https://my.oschina.net/zhuqingbo0501/blog/1784693版权归作者所有，转载请注明出处","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://oxffff.com/tags/java/"}]},{"title":"Java8 Stream API","slug":"Java8-Stream-API","date":"2018-04-25T00:31:05.000Z","updated":"2018-06-06T12:04:22.992Z","comments":true,"path":"2018/04/25/Java8-Stream-API/","link":"","permalink":"http://oxffff.com/2018/04/25/Java8-Stream-API/","excerpt":"","text":"StreamStream分为中间操作（Intermediate operations）和终止操作（Terminal operations） Intermediate：一个流可以后面跟随零个或多个 intermediate 操作。其目的主要是打开流，做出某种程度的数据映射/过滤，然后返回一个新的流，交给下一个操作使用。这类操作都是惰性化的（lazy），就是说，仅仅调用到这类方法，并没有真正开始流的遍历。常见操作有 map (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered。 Terminal：一个流只能有一个 terminal 操作，当这个操作执行后，流就被使用“光”了，无法再被操作。所以这必定是流的最后一个操作。Terminal 操作的执行，才会真正开始流的遍历，并且会生成一个结果，或者一个 side effect。常见操作有 forEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator。 关于Short-circuiting 对于一个 intermediate 操作，如果它接受的是一个无限大（infinite/unbounded）的 Stream，但返回一个有限的新 Stream。 对于一个 terminal 操作，如果它接受的是一个无限大的 Stream，但能在有限的时间计算出结果。 常见操作有 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 limit 以下摘自 这里 Stream操作分类中间操作(Intermediate operations)无状态(Stateless)unordered() filter() map() mapToInt() mapToLong() mapToDouble() flatMap() flatMapToInt() flatMapToLong() flatMapToDouble() peek()有状态(Stateful)distinct() sorted() sorted() limit() skip() 结束操作(Terminal operations)非短路操作forEach() forEachOrdered() toArray() reduce() collect() max() min() count()短路操作(short-circuiting)anyMatch() allMatch() noneMatch() findFirst() findAny() Stream上的所有操作分为两类：中间操作和结束操作，中间操作只是一种标记，只有结束操作才会触发实际计算。中间操作又可以分为无状态的(Stateless)和有状态的(Stateful)，无状态中间操作是指元素的处理不受前面元素的影响，而有状态的中间操作必须等到所有元素处理之后才知道最终结果，比如排序是有状态操作，在读取所有元素之前并不能确定排序结果；结束操作又可以分为短路操作和非短路操作，短路操作是指不用处理全部元素就可以返回结果，比如找到第一个满足条件的元素。之所以要进行如此精细的划分，是因为底层对每一种情况的处理方式不同。 Stream API Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate); 12Stream.of(\"one\", \"two\", \"three\", \"four\", \"five\") .filter(str -&gt; str.length() &gt; 3); 123456789101112Stream&lt;String&gt; Stream&lt;String&gt; +-------+ | one | +-------+ | two | +-------+ +-------+ | three | filter() | three | +-------+ ---------------&gt; +-------+ | four | str.length() &gt; 3 | four | +-------+ +-------+ | five | | five | +-------+ +-------+ &lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper); 12Stream.of(\"one\", \"two\", \"three\", \"four\", \"five\") .map(String::toUpperCase); 123456789101112Stream&lt;String&gt; Stream&lt;String&gt; +-------+ +-------+ | one | | ONE | +-------+ +-------+ | two | | TWO | +-------+ +-------+ | three | map() | THREE | +-------+ ---------------&gt; +-------+ | four | toUpperCase | FOUR | +-------+ +-------+ | five | | FIVE | +-------+ +-------+ IntStream mapToInt(ToIntFunction&lt;? super T&gt; mapper); 12Stream.of(\"1\", \"2\", \"3\", \"4\", \"5\") .mapToInt(Integer::valueOf); 123456789101112Stream&lt;String&gt; IntStream +-------+ +-------+ | 1 | | 1 | +-------+ +-------+ | 2 | | 2 | +-------+ +-------+ | 3 | mapToInt() | 3 | +-------+ ---------------&gt; +-------+ | 4 | Integer.valueOf | 4 | +-------+ +-------+ | 5 | | 5 | +-------+ +-------+ LongStream mapToLong(ToLongFunction&lt;? super T&gt; mapper); 12Stream.of(\"1\", \"2\", \"3\", \"4\", \"5\") .mapToLong(Long::valueOf); 123456789101112Stream&lt;String&gt; LongStream +-------+ +-------+ | 1 | | 1 | +-------+ +-------+ | 2 | | 2 | +-------+ +-------+ | 3 | mapToLong() | 3 | +-------+ ---------------&gt; +-------+ | 4 | Long.valueOf | 4 | +-------+ +-------+ | 5 | | 5 | +-------+ +-------+ DoubleStream mapToDouble(ToDoubleFunction&lt;? super T&gt; mapper); 12Stream.of(\"1.1\", \"2.2\", \"3.3\", \"4.4\", \"5.5\") .mapToDouble(Double::valueOf); 123456789101112Stream&lt;String&gt; DoubleStream +-------+ +-------+ | 1.1 | | 1.1 | +-------+ +-------+ | 2.2 | | 2.2 | +-------+ +-------+ | 3.3 | mapToDouble() | 3.3 | +-------+ ---------------&gt; +-------+ | 4.4 | Double.valueOf | 4.4 | +-------+ +-------+ | 5.5 | | 5.5 | +-------+ +-------+ &lt;R&gt; Stream&lt;R&gt; flatMap(Function&lt;? super T, ? extends Stream&lt;? extends R&gt;&gt; mapper); 12Stream.of(Arrays.asList(\"one\", \"two\"), Arrays.asList(\"three\", \"four\", \"five\")) .flatMap(list -&gt; list.stream()); 12345678910111213141516Stream&lt;List&lt;String&gt; Stream&lt;String&gt; +-----------+ | +-------+ | | | one | | | +-------+ | | | two | | +-------+ | +-------+ | | one | | | flatMap() +-------+ | +-------+ | ---------------&gt; | two | | | three | | +-------+ | +-------+ | | three | | | four | | +-------+ | +-------+ | | four | | | five | | +-------+ | +-------+ | | five | +-----------+ +-------+ IntStream flatMapToInt(Function&lt;? super T, ? extends IntStream&gt; mapper); Similar to flatMap LongStream flatMapToLong(Function&lt;? super T, ? extends LongStream&gt; mapper); Similar to flatMap DoubleStream flatMapToDouble(Function&lt;? super T, ? extends DoubleStream&gt; mapper); Similar to flatMap Stream&lt;T&gt; distinct(); 12Stream.of(\"one\", \"two\", \"three\", \"four\", \"four\") .distinct(); 123456789101112Stream&lt;String&gt; Stream&lt;String&gt; +-------+ | one | +-------+ +-------+ | two | | one | +-------+ +-------+ | three | distinct() | two | +-------+ ---------------&gt; +-------+ | four | | three | +-------+ +-------+ | four | | four | +-------+ +-------+ Stream&lt;T&gt; sorted(); 默认自然顺序等价于sorted(Comparator.naturalOrder()) 12Stream.of(\"one\", \"two\", \"three\", \"four\", \"five\") .sorted(); 123456789101112Stream&lt;String&gt; Stream&lt;String&gt; +-------+ +-------+ | one | | five | +-------+ +-------+ | two | | four | +-------+ +-------+ | three | sorted() | one | +-------+ ---------------&gt; +-------+ | four | | three | +-------+ +-------+ | five | | two | +-------+ +-------+ Stream&lt;T&gt; sorted(Comparator&lt;? super T&gt; comparator); 12Stream.of(\"one\", \"two\", \"three\", \"four\", \"five\") .sorted(Comparator.naturalOrder()); 123456789101112Stream&lt;String&gt; Stream&lt;String&gt; +-------+ +-------+ | one | | five | +-------+ +-------+ | two | | four | +-------+ +-------+ | three | sorted() | one | +-------+ ---------------&gt; +-------+ | four | naturalOrder | three | +-------+ +-------+ | five | | two | +-------+ +-------+ Stream&lt;T&gt; peek(Consumer&lt;? super T&gt; action); 123Stream.of(\"one\", \"two\", \"three\", \"four\", \"five\") .peek(e -&gt; System.out.println(\"Peek value: \" + e)) .count(); Stream&lt;T&gt; limit(long maxSize); 12Stream.of(\"one\", \"two\", \"three\", \"four\", \"five\") .limit(4); 123456789101112Stream&lt;String&gt; Stream&lt;String&gt; +-------+ | one | +-------+ +-------+ | two | | one | +-------+ +-------+ | three | limit() | two | +-------+ ---------------&gt; +-------+ | four | | three | +-------+ +-------+ | five | | four | +-------+ +-------+ Stream&lt;T&gt; skip(long n); 12Stream.of(\"one\", \"two\", \"three\", \"four\", \"five\") .skip(2); 123456789101112Stream&lt;String&gt; Stream&lt;String&gt; +-------+ | one | +-------+ | two | +-------+ +-------+ | three | skip() | three | +-------+ ---------------&gt; +-------+ | four | | four | +-------+ +-------+ | five | | five | +-------+ +-------+ void forEach(Consumer&lt;? super T&gt; action); 1234Stream.of(\"one\", \"two\", \"three\", \"four\", \"five\") .forEach(str -&gt; &#123; System.out.println(str.toUpperCase()); &#125;); void forEachOrdered(Consumer&lt;? super T&gt; action); 非并行化情况下等价于forEach，并行化情况下forEachOrdered始终保持顺序， 但forEach不是 1234567Stream.of(\"one\", \"two\", \"three\", \"four\", \"five\") .parallel() .forEach(System.out::println);Stream.of(\"one\", \"two\", \"three\", \"four\", \"five\") .parallel() .forEachOrdered(System.out::println); Object[] toArray(); 12Stream.of(\"one\", \"two\", \"three\", \"four\", \"five\") .toArray(); 123456789101112Stream&lt;String&gt; String[] +-------+ +-------+ | one | | five | +-------+ +-------+ | two | | four | +-------+ +-------+ | three | toArray() | one | +-------+ ---------------&gt; +-------+ | four | | three | +-------+ +-------+ | five | | two | +-------+ +-------+ &lt;A&gt; A[] toArray(IntFunction&lt;A[]&gt; generator); 建议采用该方法 12Stream.of(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;) .toArray(String[]::new); T reduce(T identity, BinaryOperator&lt;T&gt; accumulator); 12Stream.of(1, 2, 3, 4) .reduce(0, (acc, element) -&gt; acc + element); Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator); 123Stream.of(1, 2, 3, 4) .reduce((acc, element) -&gt; acc + element) .ifPresent(System.out::println); &lt;U&gt; U reduce(U identity, BiFunction&lt;U, ? super T, U&gt; accumulator, BinaryOperator&lt;U&gt; combiner); 并行化 的时候 combiner 参数才有效。 12345678910Arrays.asList(1, 2, 3, 4, 5, 6).parallelStream() .reduce(0, (sum, p) -&gt; &#123; System.out.format(\"accumulator: sum=%s; person=%s\\n\", sum, p); return sum += p; &#125;, (sum1, sum2) -&gt; &#123; System.out.format(\"combiner: sum1=%s; sum2=%s\\n\", sum1, sum2); return sum1 + sum2; &#125;); &lt;R&gt; R collect(Supplier&lt;R&gt; supplier, BiConsumer&lt;R, ? super T&gt; accumulator, BiConsumer&lt;R, R&gt; combiner); supplier创造目标类型实例， accumulator 将当元素添加到目标中， combiner 将中间状态的多个结果整合到一起并行化 的时候 combiner 参数才有效。 1234567Stream.of(\"one\", \"two\", \"three\", \"four\", \"five\") .parallel() .collect( () -&gt; new ArrayList&lt;&gt;(), (list, item) -&gt; list.add(item), (one, two) -&gt; one.addAll(two) ).forEach(System.out::println); &lt;R, A&gt; R collect(Collector&lt;? super T, A, R&gt; collector); 流转换为其它数据结构， 具体参考Collector，Collectors 12345Stream.of(\"one\", \"two\", \"three\", \"four\", \"five\") .collect(Collectors.toList());Stream.of(\"one\", \"two\", \"three\", \"four\", \"five\") .collect(Collectors.toSet()); 123456789101112Stream&lt;String&gt; List&lt;String&gt; +-------+ +-------+ | one | | five | +-------+ +-------+ | two | | four | +-------+ +-------+ | three | collect() | one | +-------+ ---------------&gt; +-------+ | four | Collectors.toList() | three | +-------+ +-------+ | five | | two | +-------+ +-------+ Optional&lt;T&gt; min(Comparator&lt;? super T&gt; comparator); 12Stream.of(1, 2, 3, 4) .min(Comparator.naturalOrder()); 12345678910Stream&lt;Integer&gt; Optional&lt;Integer&gt; +-------+ | 1 | +-------+ | 2 | +-------+ | 3 | min() +-------+ +-------+ -----------&gt; | 1 | | 4 | +-------+ +-------+ Optional&lt;T&gt; max(Comparator&lt;? super T&gt; comparator); 12Stream.of(1, 2, 3, 4) .max(Comparator.naturalOrder()); 12345678910Stream&lt;Integer&gt; Optional&lt;Integer&gt; +-------+ | 1 | +-------+ | 2 | +-------+ | 3 | max() +-------+ +-------+ -----------&gt; | 4 | | 4 | +-------+ +-------+ long count();12Stream.of(1, 2, 3, 4) .count(); 12345678910Stream&lt;Integer&gt; long +-------+ | 1 | +-------+ | 2 | +-------+ | 3 | count() +-------+ +-------+ -----------&gt; | 4 | | 4 | +-------+ +-------+ boolean anyMatch(Predicate&lt;? super T&gt; predicate); 流中存在元素匹配，即为true 12Stream.of(\"one\", \"two\", \"three\", \"four\", \"five\") .anyMatch(str -&gt; str.contains(\"tw\")); boolean allMatch(Predicate&lt;? super T&gt; predicate); 流中全部元素匹配，才为true 12Stream.of(\"one\", \"two\", \"four\") .allMatch(str -&gt; str.contains(\"o\")); boolean noneMatch(Predicate&lt;? super T&gt; predicate); 流中全部元素均不匹配，才为true 12Stream.of(\"one\", \"two\", \"three\", \"four\", \"five\") .noneMatch(str -&gt; str.contains(\"six\")); Optional&lt;T&gt; findFirst(); 返回第一个元素 12Stream.of(\"one\", \"two\", \"three\", \"four\", \"five\") .findFirst().ifPresent(System.out::println); Optional&lt;T&gt; findAny(); 并行化时“随机”选择一个元素返回，非并行化和findFirst类似123Stream.of(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\") .parallel() .findAny().ifPresent(System.out::println);","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://oxffff.com/tags/java/"}]},{"title":"Google Java编程风格指南","slug":"Google-Java-Style-Guide","date":"2018-04-24T23:27:18.000Z","updated":"2018-06-06T12:04:22.992Z","comments":true,"path":"2018/04/24/Google-Java-Style-Guide/","link":"","permalink":"http://oxffff.com/2018/04/24/Google-Java-Style-Guide/","excerpt":"","text":"Google Java编程风格指南前言这份文档是Google Java编程风格规范的完整定义。当且仅当一个Java源文件符合此文档中的规则， 我们才认为它符合Google的Java编程风格。 与其它的编程风格指南一样，这里所讨论的不仅仅是编码格式美不美观的问题， 同时也讨论一些约定及编码标准。然而，这份文档主要侧重于我们所普遍遵循的规则， 对于那些不是明确强制要求的，我们尽量避免提供意见。 1.1 术语说明在本文档中，除非另有说明： 术语class可表示一个普通类，枚举类，接口或是annotation类型(@interface) 术语comment只用来指代实现的注释(implementation comments)，我们不使用“documentation comments”一词，而是用Javadoc。 其他的术语说明会偶尔在后面的文档出现。 1.2 指南说明本文档中的示例代码并不作为规范。也就是说，虽然示例代码是遵循Google编程风格，但并不意味着这是展现这些代码的唯一方式。 示例中的格式选择不应该被强制定为规则。 源文件基础2.1 文件名源文件以其最顶层的类名来命名，大小写敏感，文件扩展名为*.java。 2.2 文件编码：UTF-8源文件编码格式为UTF-8。 2.3 特殊字符2.3.1 空白字符除了行结束符序列，ASCII水平空格字符(0×20，即空格`)是源文件中唯一允许出现的空白字符，这意味着： 所有其它字符串中的空白字符都要进行转义。 制表符不用于缩进。 2.3.2 特殊转义序列对于具有特殊转义序列的任何字符(\\b, \\t, \\n, \\f, \\r, “, ‘及\\)，我们使用它的转义序列，而不是相应的八进制(比如\\012)或Unicode(比如\\u000a)转义。 2.3.3 非ASCII字符对于剩余的非ASCII字符，是使用实际的Unicode字符(比如∞)，还是使用等价的Unicode转义符(比如\\u221e)，取决于哪个能让代码更易于阅读和理解。 Tip: 在使用Unicode转义符或是一些实际的Unicode字符时，建议做些注释给出解释，这有助于别人阅读和理解。 例如： 12345String unitAbbrev = \"μs\"; // 赞，即使没有注释也非常清晰String unitAbbrev = \"\\u03bcs\"; // \"μs\" // 允许，但没有理由要这样做String unitAbbrev = \"\\u03bcs\"; // Greek letter mu, \"s\" // 允许，但这样做显得笨拙还容易出错String unitAbbrev = \"\\u03bcs\"; // 很糟，读者根本看不出这是什么return '\\ufeff' + content; // byte order mark // Good，对于非打印字符，使用转义，并在必要时写上注释 Tip: 永远不要由于害怕某些程序可能无法正确处理非ASCII字符而让你的代码可读性变差。当程序无法正确处理非ASCII字符时，它自然无法正确运行， 你就会去fix这些问题的了。(言下之意就是大胆去用非ASCII字符，如果真的有需要的话) 源文件结构一个源文件包含(按顺序地)： 许可证或版权信息(如有需要) package语句 import语句 一个顶级类(只有一个) 以上每个部分之间用一个空行隔开。 3.1 许可证或版权信息如果一个文件包含许可证或版权信息，那么它应当被放在文件最前面。 3.2 package语句package语句不换行，列限制(4.4节)并不适用于package语句。(即package语句写在一行里) 3.3 import语句3.3.1 import不要使用通配符即，不要出现类似这样的import语句：1import java.util.*; 3.3.2 不要换行import语句不换行，列限制(4.4节)并不适用于import语句。(每个import语句独立成行) 3.3.3 顺序和间距import语句可分为以下几组，按照这个顺序，每组由一个空行分隔： 所有的静态导入独立成组 com.google imports(仅当这个源文件是在com.google包下) 第三方的包。每个顶级包为一组，字典序。例如：android, com, junit, org, sun java imports javax imports 组内不空行，按字典序排列。 3.4 类声明3.4.1 只有一个顶级类声明每个顶级类都在一个与它同名的源文件中(当然，还包含.java后缀)。 例外：package-info.java，该文件中可没有package-info类。 3.4.2 类成员顺序类的成员顺序对易学性有很大的影响，但这也不存在唯一的通用法则。不同的类对成员的排序可能是不同的。 最重要的一点，每个类应该以某种逻辑去排序它的成员，维护者应该要能解释这种排序逻辑。比如， 新的方法不能总是习惯性地添加到类的结尾，因为这样就是按时间顺序而非某种逻辑来排序的。 3.4.2.1 重载：永不分离当一个类有多个构造函数，或是多个同名方法，这些函数/方法应该按顺序出现在一起，中间不要放进其它函数/方法。 格式术语说明： 块状结构(block-like construct)指的是一个类，方法或构造函数的主体。需要注意的是，数组初始化中的初始值可被选择性地视为块状结构(4.8.3.1节)。 4.1 大括号4.1.1 使用大括号(即使是可选的)大括号与if, else, for, do, while语句一起使用，即使只有一条语句(或是空)，也应该把大括号写上。 4.1.2 非空块：K &amp; R 风格对于非空块和块状结构，大括号遵循Kernighan和Ritchie风格 (Egyptian brackets): 左大括号前不换行 左大括号后换行 右大括号前换行 如果右大括号是一个语句、函数体或类的终止，则右大括号后换行; 否则不换行。例如，如果右大括号后面是else或逗号，则不换行。 示例： 1234567891011return new MyClass() &#123; @Override public void method() &#123; if (condition()) &#123; try &#123; something(); &#125; catch (ProblemException e) &#123; recover(); &#125; &#125; &#125;&#125;; 4.8.1节给出了enum类的一些例外。 4.1.3 空块：可以用简洁版本一个空的块状结构里什么也不包含，大括号可以简洁地写成{}，不需要换行。例外：如果它是一个多块语句的一部分(if/else 或 try/catch/finally) ，即使大括号内没内容，右大括号也要换行。 示例： 1void doNothing() &#123;&#125; 4.2 块缩进：2个空格每当开始一个新的块，缩进增加2个空格，当块结束时，缩进返回先前的缩进级别。缩进级别适用于代码和注释。(见4.1.2节中的代码示例) 4.3 一行一个语句每个语句后要换行。 4.4 列限制：80或100一个项目可以选择一行80个字符或100个字符的列限制，除了下述例外，任何一行如果超过这个字符数限制，必须自动换行。 例外： 不可能满足列限制的行(例如，Javadoc中的一个长URL，或是一个长的JSNI方法参考)。 package和import语句(见3.2节和3.3节)。 注释中那些可能被剪切并粘贴到shell中的命令行。 4.5 自动换行术语说明： 一般情况下，一行长代码为了避免超出列限制(80或100个字符)而被分为多行，我们称之为自动换行(line-wrapping)。 我们并没有全面，确定性的准则来决定在每一种情况下如何自动换行。很多时候，对于同一段代码会有好几种有效的自动换行方式。 Tip: 提取方法或局部变量可以在不换行的情况下解决代码过长的问题(是合理缩短命名长度吧) 4.5.1 从哪里断开自动换行的基本准则是：更倾向于在更高的语法级别处断开。 如果在非赋值运算符处断开，那么在该符号前断开(比如+，它将位于下一行)。注意：这一点与Google其它语言的编程风格不同(如C++和JavaScript)。 这条规则也适用于以下“类运算符”符号：点分隔符(.)，类型界限中的&amp;（)，catch块中的管道符号(catch (FooException | BarException e) 如果在赋值运算符处断开，通常的做法是在该符号后断开(比如=，它与前面的内容留在同一行)。这条规则也适用于foreach语句中的分号。 方法名或构造函数名与左括号留在同一行。 逗号(,)与其前面的内容留在同一行。 4.5.2 自动换行时缩进至少+4个空格自动换行时，第一行后的每一行至少比第一行多缩进4个空格(注意：制表符不用于缩进。见2.3.1节)。 当存在连续自动换行时，缩进可能会多缩进不只4个空格(语法元素存在多级时)。一般而言，两个连续行使用相同的缩进当且仅当它们开始于同级语法元素。 第4.6.3水平对齐一节中指出，不鼓励使用可变数目的空格来对齐前面行的符号。 4.6 空白4.6.1 垂直空白以下情况需要使用一个空行： 类内连续的成员之间：字段，构造函数，方法，嵌套类，静态初始化块，实例初始化块。例外：两个连续字段之间的空行是可选的，用于字段的空行主要用来对字段进行逻辑分组。 在函数体内，语句的逻辑分组间使用空行。 类内的第一个成员前或最后一个成员后的空行是可选的(既不鼓励也不反对这样做，视个人喜好而定)。 要满足本文档中其他节的空行要求(比如3.3节：import语句) 多个连续的空行是允许的，但没有必要这样做(我们也不鼓励这样做)。 4.6.2 水平空白除了语言需求和其它规则，并且除了文字，注释和Javadoc用到单个空格，单个ASCII空格也出现在以下几个地方： 分隔任何保留字与紧随其后的左括号(()(如if, for catch等)。 分隔任何保留字与其前面的右大括号(})(如else, catch)。 在任何左大括号前({)，两个例外： @SomeAnnotation({a, b})(不使用空格)。 String[][] x = foo;(大括号间没有空格，见下面的Note)。 在任何二元或三元运算符的两侧。这也适用于以下“类运算符”符号： 类型界限中的&amp;()。 catch块中的管道符号(catch (FooException | BarException e)。 foreach语句中的分号。 在, : ;及右括号())后 如果在一条语句后做注释，则双斜杠(//)两边都要空格。这里可以允许多个空格，但没有必要。 类型和变量之间：List list。 数组初始化中，大括号内的空格是可选的，即new int[] {5, 6}和new int[] { 5, 6 }都是可以的。 Note：这个规则并不要求或禁止一行的开关或结尾需要额外的空格，只对内部空格做要求。 4.6.3 水平对齐：不做要求术语说明： 水平对齐指的是通过增加可变数量的空格来使某一行的字符与上一行的相应字符对齐。 这是允许的(而且在不少地方可以看到这样的代码)，但Google编程风格对此不做要求。即使对于已经使用水平对齐的代码，我们也不需要去保持这种风格。 以下示例先展示未对齐的代码，然后是对齐的代码： 12345private int x; // this is fineprivate Color color; // this tooprivate int x; // permitted, but future editsprivate Color color; // may leave it unaligned Tip：对齐可增加代码可读性，但它为日后的维护带来问题。考虑未来某个时候，我们需要修改一堆对齐的代码中的一行。 这可能导致原本很漂亮的对齐代码变得错位。很可能它会提示你调整周围代码的空白来使这一堆代码重新水平对齐(比如程序员想保持这种水平对齐的风格)， 这就会让你做许多的无用功，增加了reviewer的工作并且可能导致更多的合并冲突。 4.7 用小括号来限定组：推荐除非作者和reviewer都认为去掉小括号也不会使代码被误解，或是去掉小括号能让代码更易于阅读，否则我们不应该去掉小括号。 我们没有理由假设读者能记住整个Java运算符优先级表。 4.8 具体结构4.8.1 枚举类枚举常量间用逗号隔开，换行可选。 没有方法和文档的枚举类可写成数组初始化的格式： 1private enum Suit &#123; CLUBS, HEARTS, SPADES, DIAMONDS &#125; 由于枚举类也是一个类，因此所有适用于其它类的格式规则也适用于枚举类。 4.8.2 变量声明4.8.2.1 每次只声明一个变量不要使用组合声明，比如int a, b;。 4.8.2.2 需要时才声明，并尽快进行初始化不要在一个代码块的开头把局部变量一次性都声明了(这是c语言的做法)，而是在第一次需要使用它时才声明。 局部变量在声明时最好就进行初始化，或者声明后尽快进行初始化。 4.8.3 数组4.8.3.1 数组初始化：可写成块状结构数组初始化可以写成块状结构，比如，下面的写法都是OK的： 1234567891011121314151617new int[] &#123; 0, 1, 2, 3&#125;new int[] &#123; 0, 1, 2, 3&#125;new int[] &#123; 0, 1, 2, 3&#125;new int[]&#123;0, 1, 2, 3&#125; 4.8.3.2 非C风格的数组声明中括号是类型的一部分：String[] args， 而非String args[]。 4.8.4 switch语句术语说明： switch块的大括号内是一个或多个语句组。每个语句组包含一个或多个switch标签(case FOO:或default:)，后面跟着一条或多条语句。 4.8.4.1 缩进与其它块状结构一致，switch块中的内容缩进为2个空格。 每个switch标签后新起一行，再缩进2个空格，写下一条或多条语句。 4.8.4.2 Fall-through：注释在一个switch块内，每个语句组要么通过break, continue, return或抛出异常来终止，要么通过一条注释来说明程序将继续执行到下一个语句组， 任何能表达这个意思的注释都是OK的(典型的是用// fall through)。这个特殊的注释并不需要在最后一个语句组(一般是default)中出现。示例： 1234567891011switch (input) &#123; case 1: case 2: prepareOneOrTwo(); // fall through case 3: handleOneTwoOrThree(); break; default: handleLargeNumber(input);&#125; 4.8.4.3 default的情况要写出来每个switch语句都包含一个default语句组，即使它什么代码也不包含。 4.8.5 注解(Annotations)注解紧跟在文档块后面，应用于类、方法和构造函数，一个注解独占一行。这些换行不属于自动换行(第4.5节，自动换行)，因此缩进级别不变。例如： 123@Override@Nullablepublic String getNameIfPresent() &#123; ... &#125; 例外：单个的注解可以和签名的第一行出现在同一行。例如： 1@Override public int hashCode() &#123; ... &#125; 应用于字段的注解紧随文档块出现，应用于字段的多个注解允许与字段出现在同一行。例如： 1@Partial @Mock DataLoader loader; 参数和局部变量注解没有特定规则。 4.8.6 注释4.8.6.1 块注释风格块注释与其周围的代码在同一缩进级别。它们可以是/* … */风格，也可以是// …风格。对于多行的/* … */注释，后续行必须从*开始， 并且与前一行的*对齐。以下示例注释都是OK的。 12345678910/* * This is * okay. */ // And so // is this./* Or you can * even do this. */ 注释不要封闭在由星号或其它字符绘制的框架里。 Tip：在写多行注释时，如果你希望在必要时能重新换行(即注释像段落风格一样)，那么使用/* … */。 4.8.7 修饰符类和成员的修饰符如果存在，则按Java语言规范中推荐的顺序出现。 12public protected private abstract static final transient volatile synchronized native strictfp 命名约定5.1 对所有标识符都通用的规则标识符只能使用ASCII字母和数字，因此每个有效的标识符名称都能匹配正则表达式\\w+。 在Google其它编程语言风格中使用的特殊前缀或后缀，如name_, mName, s_name和kName，在Java编程风格中都不再使用。 5.2 标识符类型的规则5.2.1 包名包名全部小写，连续的单词只是简单地连接起来，不使用下划线。 5.2.2 类名类名都以UpperCamelCase风格编写。 类名通常是名词或名词短语，接口名称有时可能是形容词或形容词短语。现在还没有特定的规则或行之有效的约定来命名注解类型。 测试类的命名以它要测试的类的名称开始，以Test结束。例如，HashTest或HashIntegrationTest。 5.2.3 方法名方法名都以lowerCamelCase风格编写。 方法名通常是动词或动词短语。 下划线可能出现在JUnit测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：test&lt;MethodUnderTest&gt;_&lt;state&gt;，例如testPop_emptyStack。 并不存在唯一正确的方式来命名测试方法。 5.2.4 常量名常量名命名模式为CONSTANT_CASE，全部字母大写，用下划线分隔单词。那到底什么算是一个常量？ 每个常量都是一个静态final字段，但不是所有静态final字段都是常量。在决定一个字段是否是一个常量时， 考虑它是否真的感觉像是一个常量。例如，如果任何一个该实例的观测状态是可变的，则它几乎肯定不会是一个常量。 只是永远不打算改变对象一般是不够的，它要真的一直不变才能将它示为常量。 1234567891011121314// Constantsstatic final int NUMBER = 5;static final ImmutableList&lt;String&gt; NAMES = ImmutableList.of(\"Ed\", \"Ann\");static final Joiner COMMA_JOINER = Joiner.on(','); // because Joiner is immutablestatic final SomeMutableType[] EMPTY_ARRAY = &#123;&#125;;enum SomeEnum &#123; ENUM_CONSTANT &#125;// Not constantsstatic String nonFinal = \"non-final\";final String nonStatic = \"non-static\";static final Set&lt;String&gt; mutableCollection = new HashSet&lt;String&gt;();static final ImmutableSet&lt;SomeMutableType&gt; mutableElements = ImmutableSet.of(mutable);static final Logger logger = Logger.getLogger(MyClass.getName());static final String[] nonEmptyArray = &#123;\"these\", \"can\", \"change\"&#125;; 这些名字通常是名词或名词短语。 5.2.5 非常量字段名非常量字段名以lowerCamelCase风格编写。 这些名字通常是名词或名词短语。 5.2.6 参数名参数名以lowerCamelCase风格编写。 参数应该避免用单个字符命名。 5.2.7 局部变量名局部变量名以lowerCamelCase风格编写，比起其它类型的名称，局部变量名可以有更为宽松的缩写。 虽然缩写更宽松，但还是要避免用单字符进行命名，除了临时变量和循环变量。 即使局部变量是final和不可改变的，也不应该把它示为常量，自然也不能用常量的规则去命名它。 5.2.8 类型变量名类型变量可用以下两种风格之一进行命名： 单个的大写字母，后面可以跟一个数字(如：E, T, X, T2)。 以类命名方式(5.2.2节)，后面加个大写的T(如：RequestT, FooBarT)。 5.3 驼峰式命名法(CamelCase)驼峰式命名法分大驼峰式命名法(UpperCamelCase)和小驼峰式命名法(lowerCamelCase)。 有时，我们有不只一种合理的方式将一个英语词组转换成驼峰形式，如缩略语或不寻常的结构(例如”IPv6”或”iOS”)。Google指定了以下的转换方案。 名字从散文形式(prose form)开始: 把短语转换为纯ASCII码，并且移除任何单引号。例如：”Müller’s algorithm”将变成”Muellers algorithm”。 把这个结果切分成单词，在空格或其它标点符号(通常是连字符)处分割开。推荐：如果某个单词已经有了常用的驼峰表示形式，按它的组成将它分割开(如”AdWords”将分割成”ad words”)。 需要注意的是”iOS”并不是一个真正的驼峰表示形式，因此该推荐对它并不适用。 现在将所有字母都小写(包括缩写)，然后将单词的第一个字母大写：每个单词的第一个字母都大写，来得到大驼峰式命名。除了第一个单词，每个单词的第一个字母都大写，来得到小驼峰式命名。 最后将所有的单词连接起来得到一个标识符。 示例： 12345678Prose form Correct Incorrect------------------------------------------------------------------&quot;XML HTTP request&quot; XmlHttpRequest XMLHTTPRequest&quot;new customer ID&quot; newCustomerId newCustomerID&quot;inner stopwatch&quot; innerStopwatch innerStopWatch&quot;supports IPv6 on iOS?&quot; supportsIpv6OnIos supportsIPv6OnIOS&quot;YouTube importer&quot; YouTubeImporter YoutubeImporter* 加星号处表示可以，但不推荐。 Note：在英语中，某些带有连字符的单词形式不唯一。例如：”nonempty”和”non-empty”都是正确的，因此方法名checkNonempty和checkNonEmpty也都是正确的。 编程实践6.1 @Override：能用则用只要是合法的，就把@Override注解给用上。 6.2 捕获的异常：不能忽视除了下面的例子，对捕获的异常不做响应是极少正确的。(典型的响应方式是打印日志，或者如果它被认为是不可能的，则把它当作一个AssertionError重新抛出。) 如果它确实是不需要在catch块中做任何响应，需要做注释加以说明(如下面的例子)。 1234567try &#123; int i = Integer.parseInt(response); return handleNumericResponse(i);&#125; catch (NumberFormatException ok) &#123; // it's not numeric; that's fine, just continue&#125;return handleTextResponse(response); 例外：在测试中，如果一个捕获的异常被命名为expected，则它可以被不加注释地忽略。下面是一种非常常见的情形，用以确保所测试的方法会抛出一个期望中的异常， 因此在这里就没有必要加注释。 12345try &#123; emptyStack.pop(); fail();&#125; catch (NoSuchElementException expected) &#123;&#125; 6.3 静态成员：使用类进行调用使用类名调用静态的类成员，而不是具体某个对象或表达式。 1234Foo aFoo = ...;Foo.aStaticMethod(); // goodaFoo.aStaticMethod(); // badsomethingThatYieldsAFoo().aStaticMethod(); // very bad 6.4 Finalizers: 禁用极少会去重写Object.finalize。 Tip：不要使用finalize。如果你非要使用它，请先仔细阅读和理解Effective Java 第7条款：“Avoid Finalizers”，然后不要使用它。 Javadoc7.1 格式7.1.1 一般形式Javadoc块的基本格式如下所示： 12345/** * Multiple lines of Javadoc text are written here, * wrapped normally... */public int method(String p1) &#123; ... &#125; 或者是以下单行形式： 1/** An especially short bit of Javadoc. */ 基本格式总是OK的。当整个Javadoc块能容纳于一行时(且没有Javadoc标记@XXX)，可以使用单行形式。 7.1.2 段落空行(即，只包含最左侧星号的行)会出现在段落之间和Javadoc标记(@XXX)之前(如果有的话)。 除了第一个段落，每个段落第一个单词前都有标签，并且它和第一个单词间没有空格。 7.1.3 Javadoc标记标准的Javadoc标记按以下顺序出现：@param, @return, @throws, @deprecated, 前面这4种标记如果出现，描述都不能为空。 当描述无法在一行中容纳，连续行需要至少再缩进4个空格。 7.2 摘要片段每个类或成员的Javadoc以一个简短的摘要片段开始。这个片段是非常重要的，在某些情况下，它是唯一出现的文本，比如在类和方法索引中。 这只是一个小片段，可以是一个名词短语或动词短语，但不是一个完整的句子。它不会以A {@code Foo} is a…或This method returns…开头, 它也不会是一个完整的祈使句，如Save the record…。然而，由于开头大写及被加了标点，它看起来就像是个完整的句子。 Tip：一个常见的错误是把简单的Javadoc写成 /** @return the customer ID */ ，这是不正确的。它应该写成/** Returns the customer ID. */。 7.3 哪里需要使用Javadoc至少在每个public类及它的每个public和protected成员处使用Javadoc，以下是一些例外： 7.3.1 例外：不言自明的方法对于简单明显的方法如getFoo，Javadoc是可选的(即，是可以不写的)。这种情况下除了写“Returns the foo”，确实也没有什么值得写了。 单元测试类中的测试方法可能是不言自明的最常见例子了，我们通常可以从这些方法的描述性命名中知道它是干什么的，因此不需要额外的文档说明。 Tip：如果有一些相关信息是需要读者了解的，那么以上的例外不应作为忽视这些信息的理由。例如，对于方法名getCanonicalName， 就不应该忽视文档说明，因为读者很可能不知道词语canonical name指的是什么。 7.3.2 例外：重写如果一个方法重写了超类中的方法，那么Javadoc并非必需的。 7.3.3 可选的Javadoc对于包外不可见的类和方法，如有需要，也是要使用Javadoc的。如果一个注释是用来定义一个类，方法，字段的整体目的或行为， 那么这个注释应该写成Javadoc，这样更统一更友好。","categories":[{"name":"编程规范","slug":"编程规范","permalink":"http://oxffff.com/categories/编程规范/"}],"tags":[{"name":"java","slug":"java","permalink":"http://oxffff.com/tags/java/"}]}]}